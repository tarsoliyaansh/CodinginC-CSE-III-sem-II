#include <stdio.h>
#include <stdlib.h>

int main() {
    struct Node {
        int data;
        struct Node* next;
    };

    struct Node* head = NULL;
    int choice, data, position;

    while (1) {
        printf("Linked List Operations\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Insert at specific position\n");
        printf("4. Delete from beginning\n");
        printf("5. Delete from end\n");
        printf("6. Delete from specific position\n");
        printf("7. Display list\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: 
                printf("Enter data to insert: ");
                scanf("%d", &data);
                {
                    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
                    newNode->data = data;
                    newNode->next = head;
                    head = newNode;
                    printf("Node inserted at the beginning.\n");
                }
                break;

            case 2: 
                printf("Enter data to insert: ");
                scanf("%d", &data);
                {
                    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
                    newNode->data = data;
                    newNode->next = NULL;
                    if (head == NULL) {
                        head = newNode;
                    } else {
                        struct Node* temp = head;
                        while (temp->next != NULL) {
                            temp = temp->next;
                        }
                        temp->next = newNode;
                    }
                    printf("Node inserted at the end.\n");
                }
                break;

            case 3: 
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter position: ");
                scanf("%d", &position);
                {
                    if (position < 1) {
                        printf("Invalid position. Position should be 1 or greater.\n");
                    } else if (position == 1) {
                        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
                        newNode->data = data;
                        newNode->next = head;
                        head = newNode;
                        printf("Node inserted at position 1.\n");
                    } else {
                        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
                        newNode->data = data;
                        struct Node* temp = head;
                        for (int i = 1; i < position - 1 && temp != NULL; i++) {
                            temp = temp->next;
                        }
                        if (temp == NULL) {
                            printf("Position out of range.\n");
                            free(newNode);
                        } else {
                            newNode->next = temp->next;
                            temp->next = newNode;
                            printf("Node inserted at position %d.\n", position);
                        }
                    }
                }
                break;

            case 4: 
                if (head == NULL) {
                    printf("List is empty. Nothing to delete.\n");
                } else {
                    struct Node* temp = head;
                    head = head->next;
                    free(temp);
                    printf("Node deleted from the beginning.\n");
                }
                break;

            case 5: 
                if (head == NULL) {
                    printf("List is empty. Nothing to delete.\n");
                } else if (head->next == NULL) {
                    free(head);
                    head = NULL;
                    printf("Node deleted from the end.\n");
                } else {
                    struct Node* temp = head;
                    while (temp->next->next != NULL) {
                        temp = temp->next;
                    }
                    free(temp->next);
                    temp->next = NULL;
                    printf("Node deleted from the end.\n");
                }
                break;

            case 6: 
                printf("Enter position: ");
                scanf("%d", &position);
                if (head == NULL) {
                    printf("List is empty. Nothing to delete.\n");
                } else if (position < 1) {
                    printf("Invalid position. Position should be 1 or greater.\n");
                } else if (position == 1) {
                    struct Node* temp = head;
                    head = head->next;
                    free(temp);
                    printf("Node deleted from position 1.\n");
                } else {
                    struct Node* temp = head;
                    struct Node* prev = NULL;
                    for (int i = 1; i < position && temp != NULL; i++) {
                        prev = temp;
                        temp = temp->next;
                    }
                    if (temp == NULL) {
                        printf("Position out of range.\n");
                    } else {
                        prev->next = temp->next;
                        free(temp);
                        printf("Node deleted from position %d.\n", position);
                    }
                }
                break;

            case 7: 
                if (head == NULL) {
                    printf("List is empty.\n");
                } else {
                    printf("Linked List: ");
                    struct Node* temp = head;
                    while (temp != NULL) {
                        printf("%d -> ", temp->data);
                        temp = temp->next;
                    }
                    printf("NULL\n");
                }
                break;

            case 8: 
                printf("Exiting program.\n");
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
return 0;
}
